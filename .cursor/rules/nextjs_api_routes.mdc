- **Always create an `index.ts` file for resource listing and creation endpoints**
  - Handles requests to the base resource path (e.g., `/api/proxy/user-tasks`)
  - Used for operations like listing all resources (`GET`) and creating new resources (`POST`)
  - Example:
    ```typescript
    // ✅ DO: Use index.ts for list/create
    // src/pages/api/proxy/user-tasks/index.ts
    export default async function handler(req, res) {
      if (req.method === 'GET') { /* list all */ }
      if (req.method === 'POST') { /* create new */ }
    }
    ```

- **Use `[...slug].ts` (or `[id].ts`) for dynamic resource access**
  - Handles requests to dynamic paths (e.g., `/api/proxy/user-tasks/[id]`, `/api/proxy/user-tasks/[...slug]`)
  - Used for operations on a specific resource (read, update, delete)
  - Example:
    ```typescript
    // ✅ DO: Use [...slug].ts for dynamic routes
    // src/pages/api/proxy/user-tasks/[...slug].ts
    export default async function handler(req, res) {
      const { slug } = req.query;
      // handle /user-tasks/:id, /user-tasks/:id/edit, etc.
    }
    ```

- **Rationale**
  - Next.js does not route the base path (e.g., `/user-tasks`) to `[...slug].ts`; it only matches `/user-tasks/anything`
  - Without `index.ts`, requests to the base path will return 404
  - This separation ensures all RESTful resource operations are correctly routed

- **Anti-patterns**
  ```typescript
  // ❌ DON'T: Expect [...slug].ts to handle the base path
  // src/pages/api/proxy/user-tasks/[...slug].ts
  // This will NOT match /api/proxy/user-tasks (only /api/proxy/user-tasks/anything)
  ```

- **References**
  - See [`src/pages/api/proxy/user-tasks/index.ts`](mdc:src/pages/api/proxy/user-tasks/index.ts) for list/create
  - See [`src/pages/api/proxy/user-tasks/[...slug].ts`](mdc:src/pages/api/proxy/user-tasks/[...slug].ts) for dynamic routes
  - [Next.js API Routes: Dynamic and Catch-all](mdc:https:/nextjs.org/docs/pages/building-your-application/routing/api-routes#catch-all-routes)

---
description: Ensure all Next.js API proxy routes use the correct JWT token import and retry logic for authenticated backend API requests
globs: src/pages/api/proxy/**/*.ts
alwaysApply: true
---

- **JWT Token Handling in API Proxy Routes**
  - Always import `getCachedApiJwt` and `generateApiJwt` from `@/lib/api/jwt` for JWT token management.
  - Implement a `fetchWithJwtRetry` function that:
    - Fetches a JWT token using `getCachedApiJwt()`.
    - Makes the backend API request with the `Authorization: Bearer <token>` header.
    - If the response is 401 (Unauthorized), regenerates the token with `generateApiJwt()` and retries the request once.
  - Use this function for all backend API calls in your proxy route handler.
  - Do **not** use direct imports of `getJwtToken` or other custom JWT logic; always use the shared helpers for consistency and caching.

**Example Implementation:**
```typescript
import { getCachedApiJwt, generateApiJwt } from '@/lib/api/jwt';

async function fetchWithJwtRetry(apiUrl: string, options: any = {}, debugLabel = '') {
  let token = await getCachedApiJwt();
  let response = await fetch(apiUrl, {
    ...options,
    headers: {
      ...options.headers,
      Authorization: `Bearer ${token}`,
    },
  });
  if (response.status === 401) {
    token = await generateApiJwt();
    response = await fetch(apiUrl, {
      ...options,
      headers: {
        ...options.headers,
        Authorization: `Bearer ${token}`,
      },
    });
  }
  return response;
}

export default async function handler(req, res) {
  // ...
  const response = await fetchWithJwtRetry(apiUrl, { ... });
  // ...
}
```

- **Rationale:**
  - Ensures all API proxy routes are authenticated and robust to token expiration.
  - Centralizes JWT logic for maintainability and security.
  - Prevents 401/500 errors due to missing or expired tokens.

- **References:**
  - See [`src/pages/api/proxy/user-profiles/[...slug].ts`](mdc:src/pages/api/proxy/user-profiles/[...slug].ts) and [`src/pages/api/proxy/events/[...slug].ts`](mdc:src/pages/api/proxy/events/[...slug].ts) for working examples.

- **References**
  - See [`src/pages/api/proxy/user-tasks/index.ts`](mdc:src/pages/api/proxy/user-tasks/index.ts) for list/create
  - See [`src/pages/api/proxy/user-tasks/[...slug].ts`](mdc:src/pages/api/proxy/user-tasks/[...slug].ts) for dynamic routes
  - [Next.js API Routes: Dynamic and Catch-all](mdc:https:/nextjs.org/docs/pages/building-your-application/routing/api-routes#catch-all-routes)
