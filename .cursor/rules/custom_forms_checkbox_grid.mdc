---
description:
globs:
alwaysApply: false
---
# Form Field and Checkbox Styling Standards

- **Page Layout Standards**
  - Use `max-w-5xl mx-auto px-8 py-8` for main page containers to enforce a consistent 80% width and center alignment on desktop views.
  - This class should be applied to the top-level div inside your page component's return statement.
  - Example:
    ```tsx
    // ✅ DO: Use consistent page layout
    <div className="max-w-5xl mx-auto px-8 py-8">
      {/* All other page content goes here */}
    </div>
    ```

- **Content Card Standards**
  - For containers that wrap main content sections like tables, lists, or forms, use `bg-white rounded-lg shadow-md p-6`.
  - This ensures a consistent card-based layout within the page, giving content a visually distinct and elevated container.
  - Example:
    ```tsx
    // ✅ DO: Use a styled container for content sections
    <div className="bg-white rounded-lg shadow-md p-6">
      {/* Table, list, or form content */}
    </div>
    ```

- **Form Field Standards**
  - **Input Field Styling**
    ```tsx
    // ✅ DO: Use consistent input field styling
    <input
      type="text"
      className="mt-1 block w-full border border-gray-400 rounded-xl focus:border-blue-500 focus:ring-blue-500 px-4 py-3 text-base"
    />
    ```
  - **Label Styling**
    ```tsx
    // ✅ DO: Use consistent label styling
    <label className="block text-sm font-medium text-gray-700">
      Field Label
    </label>
    ```

- **Checkbox Standards**
  - **Size and Styling**
    ```tsx
    // ✅ DO: Use consistent checkbox styling
    <label className="flex flex-col items-center">
      <span className="relative flex items-center justify-center">
        <input
          type="checkbox"
          className="custom-checkbox"
          checked={isChecked}
          onChange={handleChange}
          onClick={(e) => e.stopPropagation()}
        />
        <span className="custom-checkbox-tick">
          {isChecked && (
            <svg className="w-6 h-6 text-black" fill="none" stroke="currentColor" strokeWidth="4" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" d="M5 13l5 5L19 7" />
            </svg>
          )}
        </span>
      </span>
      <span className="mt-2 text-xs text-center select-none break-words max-w-[6rem]">Checkbox Label</span>
    </label>
    ```
  - **Checkbox Group Layout**
    ```tsx
    // ✅ DO: Use consistent checkbox group layout
    <div className="custom-grid-table mt-4" style={{ display: 'grid', gridTemplateColumns: 'repeat(3, 1fr)', gap: '0.5rem' }}>
      {/* Checkbox items */}
    </div>
    ```

- **CSS Requirements**
  ```css
  /* Required in globals.css */
  .custom-checkbox {
    @apply h-6 w-6 border-2 border-gray-400 rounded-lg cursor-pointer appearance-none relative bg-white;
  }

  .custom-checkbox:checked {
    @apply bg-blue-600 border-blue-600;
  }

  .custom-checkbox-tick {
    @apply absolute inset-0 flex items-center justify-center pointer-events-none;
  }

  .custom-checkbox:checked + .custom-checkbox-tick svg {
    @apply block text-black;
  }

  .custom-checkbox:not(:checked) + .custom-checkbox-tick svg {
    @apply hidden;
  }

  .custom-checkbox:focus {
    @apply outline-none ring-2 ring-blue-500 ring-offset-2;
  }

  .custom-checkbox:hover:not(:disabled) {
    @apply border-blue-500;
  }

  .custom-checkbox:disabled {
    @apply opacity-50 cursor-not-allowed;
  }

  .custom-grid-table {
    @apply grid grid-cols-3 gap-4;
  }

  .custom-grid-cell {
    @apply flex flex-col items-center justify-center p-2;
  }
  ```

- **Anti-patterns**
  ```tsx
  // ❌ DON'T: Use small checkboxes
  <input type="checkbox" className="h-4 w-4" />

  // ❌ DON'T: Use inconsistent styling
  <input type="checkbox" className="rounded border-gray-300" />

  // ❌ DON'T: Skip the custom-checkbox class
  <input type="checkbox" className="h-6 w-6 rounded" />

  // ❌ DON'T: Use white checkmark color
  <svg className="w-6 h-6 text-white" />
  ```

- **References**
  - See `src/styles/globals.css` for CSS implementation
  - See `src/app/admin/events/[id]/media/list/page.tsx` for usage example
  - See `src/app/admin/events/[id]/edit/page.tsx` for reference implementation

- **Button Styling and Icons**
  - **Standard Buttons:** Use consistent styling for primary and secondary actions.
  - **Icons:** Use icons from a standard library like `react-icons/fa` to improve usability. Icons should be placed before the text and have a small margin.
  - **Cancel Button:** Use a distinct, non-destructive style for cancel buttons, such as a light teal background, to differentiate them from confirm actions.
  - **Example Implementation:**
    ```tsx
    // ✅ DO: Use consistent button styling with icons
    <button
      type="submit"
      className="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded-md flex items-center gap-2"
      disabled={isPending}
    >
      <FaSave />
      {isPending ? 'Saving...' : 'Save Changes'}
    </button>

    <button
      type="button"
      onClick={onClose}
      className="bg-teal-100 hover:bg-teal-200 text-teal-800 px-4 py-2 rounded-md flex items-center gap-2"
      disabled={isPending}
    >
      <FaTimes />
      Cancel
    </button>
    ```
  - **Anti-patterns**
    ```tsx
    // ❌ DON'T: Use inconsistent colors or miss icons
    <button className="bg-red-500 text-white">Save</button>
    <button className="bg-gray-400">Cancel</button>
    ```
